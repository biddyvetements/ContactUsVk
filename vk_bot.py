import asyncio

from vkbottle import Text, Keyboard
from vkbottle.bot import Bot, Message

from keyboards import main_menu_keyboard, cancel_keyboard, confirm_send_keyboard
from states import SendNewsStates

bot = Bot(
    token="vk1.a.pFHEFJWwjVYIWnAo5k26wli7_B-OpIWa0x5ZqB13y4xupmEftzBfy99OuQcnSggEkHqS8LD4sgj0jH-Uz7IYqjYGLnr1kRzcQpM_8oJTDVB7WfbapYkYpbNy-i0mi_k2DYSZFSfEBYhDhpbv4owuEaLHoxmKMYD2WhsA6MXvjTSOytN0a3YD8-p9shGPXJ3Ppj6DWGWStcNtMulILwwSTA")


@bot.on.message(text="–ù–∞—á–∞—Ç—å")
async def main_menu_handler(message: Message):
    text = '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëáüèª'
    await message.answer(message=text, keyboard=main_menu_keyboard.get_json())


@bot.on.message(text='‚úçÔ∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–∏')
async def begin_news_report(message: Message):
    text = '–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–æ–≤–æ—Å—Ç—å.'
    await bot.state_dispenser.set(message.peer_id, SendNewsStates.send_city_name)
    await message.answer(message=text, keyboard=cancel_keyboard.get_json())


@bot.on.message(state=SendNewsStates.send_city_name)
async def fetch_city_name(message: Message):
    text = '–û—Ç–ª–∏—á–Ω–æ üëç\n\n–í —Å–ª–µ–¥—É—é—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑–ª–æ–∂–∏—Ç–µ —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏'
    await bot.state_dispenser.set(message.peer_id, SendNewsStates.send_news, city_name=message.text)
    await message.answer(message=text, keyboard=cancel_keyboard.get_json())


@bot.on.message(state=SendNewsStates.send_news)
async def fetch_news_text(message: Message):
    state_data = await bot.state_dispenser.get(message.peer_id)
    state_data = state_data.payload
    print(state_data)
    text = ('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –≤–∞–º–∏ –Ω–æ–≤–æ—Å—Ç—å:\n\n'
            f'{state_data["city_name"]}\n'
            f'{message.text}')
    await bot.state_dispenser.set(message.peer_id, SendNewsStates.send_confirm, news_text=message.text)
    await message.answer(message=text, keyboard=confirm_send_keyboard)

@bot.on.message(state=SendNewsStates.send_confirm)
async def confirm_answer(message: Message):
    if message.text == '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        state_data = await bot.state_dispenser.get(message.peer_id)
        state_data = state_data.payload



if __name__ == '__main__':

    asyncio.run(bot.run_polling())

